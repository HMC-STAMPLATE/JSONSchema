stages:
  - test
  - upload
  - release

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/stamplate"

validate-schemas:
  stage: test
  image: node:lts
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - 'schemas/*.schema.json'
  before_script:
    - npm ci
  script:
    - for file in schemas/*.json; do; npx ajv-cli compile -s $file || exit $?; done;

upload:
  stage: upload
  image: node:lts
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - stamplate.jsonld
  script:
    - |
      export PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - |
      echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> build.env
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file stamplate.jsonld "${PACKAGE_REGISTRY_URL}/${PACKAGE_VERSION}/stamplate.jsonld"
  artifacts:
    reports:
      dotenv: build.env

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - stamplate.jsonld
  script:
    - 'true'
  release:
    name: "Release ${PACKAGE_VERSION}"
    description: "Release ${PACKAGE_VERSION} of ${CI_PROJECT_NAME}"
    tag_name: "${PACKAGE_VERSION}"
    ref: "${PACKAGE_VERSION}"
    assets:
      links:
        - name: "stamplate.jsonld"
          filepath: "/stamplate.jsonld"
          url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_VERSION}/stamplate.jsonld"
