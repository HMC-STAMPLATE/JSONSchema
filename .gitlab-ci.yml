stages:
  - test
  - upload
  - release

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/stamplate"

validate-schemas:
  stage: test
  image: node:lts
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        # just run the tests when something in the schemas or examples changed
        #
        # in the future we can use $CI_DEFAULT_BRANCH, too
        # see https://gitlab.com/gitlab-org/gitlab/-/issues/369916
        compare_to: 'refs/heads/main'
        paths:
          - 'schemas/*.schema.json'
          - 'examples/*.json'
  before_script:
    - npm ci
  script:
    # validate the schemas
    - "for file in schemas/*.schema.json; do npx ajv-cli compile -s $file || exit $?; done"
    # validate the examples against the schemas
    - "for file in schemas/*.schema.json; do npx ajv-cli validate -s $file -d `echo $file | sed -e 's/schema\\.//' -e 's/schemas/examples/'` || exit $?; done"

validate-jsonld:
  stage: test
  image: node:lts
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        # just run the tests when something in the examples or the context file
        # changed
        #
        # in the future we can use $CI_DEFAULT_BRANCH, too
        # see https://gitlab.com/gitlab-org/gitlab/-/issues/369916
        compare_to: 'refs/heads/main'
        paths:
          - 'examples/*.json'
          - 'stamplate.jsonld'
  before_script:
    - npm ci
  script:
    # validate the examples
    - "for file in examples/*.json; do npx jsonld-cli lint $file || exit $?; done"

upload:
  stage: upload
  image: node:lts
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - stamplate.jsonld
  script:
    - |
      export PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - |
      echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> build.env
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file stamplate.jsonld "${PACKAGE_REGISTRY_URL}/${PACKAGE_VERSION}/stamplate.jsonld"
  artifacts:
    reports:
      dotenv: build.env

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - stamplate.jsonld
  script:
    - 'true'
  release:
    name: "Release ${PACKAGE_VERSION}"
    description: "Release ${PACKAGE_VERSION} of ${CI_PROJECT_NAME}"
    tag_name: "${PACKAGE_VERSION}"
    ref: "${PACKAGE_VERSION}"
    assets:
      links:
        - name: "stamplate.jsonld"
          filepath: "/stamplate.jsonld"
          url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_VERSION}/stamplate.jsonld"

pages:
  stage: release
  image: node:lts
  before_script:
    - npm ci
  script:
    # cp static files to public/
    - "mkdir -p public/schemas && cp schemas/*.schema.json public/schemas/."
    - "mkdir -p public/vocab && cp stamplate.jsonld public/vocab/."
    # build the site
    - "npx @11ty/eleventy"
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
